#!/usr/bin/env bash

set -e

# Metadata Information
SCHEME="0.1.0"
VENDOR="Scribe Security, Inc"
SHORT_DESC="Evaluate and enforce Supply-Chain policies on container images"
LONG_DESC="Evaluate and enforce Supply-Chain policies on container images as code"
URL="https://github.com/scribe-security/valint"
EVIDENCE_DIR=${EVIDENCE_DIR:-"evidence"}

# Tool and Path Configuration
tool="valint"
trivy_tool="trivy"
scribe_default="${HOME}/.scribe/bin/"

# Feature Flags and Defaults
ONLY_VERIFY=${ONLY_VERIFY:-false}
INCLUDE_FILES=${INCLUDE_FILES:-false}
DEBUG_MODE=${DEBUG_MODE:-false}
# DRY_RUN=${DRY_RUN:-false}

# Help message function
# Help message function
show_help() {
  cat << EOF
Usage: $0 policy [options]

This Docker CLI plugin evaluates and enforces supply-chain policies on container images.

Options:
  -h, --help              Show this help message and exit.
  -x, --debug             Enable debug logging and increase verbosity in valint with -vv.

Environment Variables:
  ONLY_VERIFY             Set to true to perform verification without SBOM generation.
                          (default: false)
  INCLUDE_FILES           Set to true to include an extensive SBOM analysis with --components files.
                          (default: false)
  EVIDENCE_DIR            Specify the directory containing third-party evidence files to include in SBOM.
                          (default: evidence)

Options:
  -d, --output-directory  Specify an output directory for metadata (default: /var/lib/docker/valint_output).
  --verify-only           Verify image using remote evidence only (no local evidence generation).
  --product-key           Set a specific product key for identifying the product (e.g., for evidence or policy tracking).
  --product-version       Specify the version of the product (e.g., v1.2).
  --select                Specify a built-in policy. Supported policies:
                            - scout: Uses the "scout_trivy.yaml" policy for analysis.
  --evidence-dir          Specify a directory to create a third-party SBOM from evidence files.
  --files                 Include files in SBOM generation if INCLUDE_FILES is enabled.

Example:
  DEBUG_MODE=true INCLUDE_FILES=true $0 policy mongo-express:latest --rule sbom/fresh-sbom@v1 --product-key my-product --product-version v1.2

EOF
}
# Docker Plugin Metadata Command
if [[ "$1" == "docker-cli-plugin-metadata" ]]; then
  cat << EOF
{
  "SchemaVersion": "${SCHEME}",
  "Vendor": "${VENDOR}",
  "URL": "${URL}",
  "ShortDescription": "${SHORT_DESC}"
}
EOF
  exit
fi

# Save docker arguments, i.e., arguments before "policy"
while [ $# -gt 0 ]; do
  if [ "$1" = "policy" ]; then
    shift
    break
  fi

  case $1 in
    -h|--help)
      show_help
      exit
      ;;
    *)
      echo "Unknown argument: $1"
      exit 1
      ;;
  esac

  DOCKER_ARGS="$DOCKER_ARGS $1"
  shift
done

valint_args=()
echo "TARGET $1"
target="$1"
shift

while [ $# -gt 0 ]; do
  case $1 in
    -x|--debug)
      echo "Debug mode enabled"
      DEBUG_MODE=true
      ;;
    -d|--output-directory)
      shift
      output_directory="$1"
      echo "Setting Evidence Output Directory '$output_directory'"
      ;;
    --verify-only)
      echo "Verify image using remote evidence only"
      ONLY_VERIFY=true
      ;;
    --product-key)
      shift
      product_key="$1"
      echo "Setting product key '$product_key'"
      ;;
    --product-version)
      shift
      product_version="$1"
      echo "Setting product version '$product_version'"
      ;;
    --select)
      shift
      SELCT_POLICY="$1"
      echo "Setting Built-in Policy '$SELCT_POLICY'"
      ;;
    --evidence-dir)
      shift
      EVIDENCE_DIR="$1"
      echo "Creating 3rd-party evidence from directory '$EVIDENCE_DIR'"
      ;;
    --dry-run)
      echo "Dry Run Enabled"
      DRY_RUN=true
      ;;
    --files)
      echo "Include files in SBOM"
      INCLUDE_FILES=true
      ;;
    *)
      valint_args+=("$1")
      ;;
  esac

  shift
done

# Enable debug logging if DEBUG_MODE is true
verify_flags=()
evidence_flags=()
policy_flags=()
product_flags=()

if [[ -z "$target" ]]; then
  echo "No target specified"
  exit 1
fi

if [[ "$DEBUG_MODE" == true ]]; then
  set -x
  verify_flags+=("-vv")
  evidence_flags+=("-vv")
fi

# Construct Flags Array Based on Feature Toggles
if [[ "$ONLY_VERIFY" != true ]]; then
  verify_flags+=("--bom")
  verify_flags+=("--provenance")
fi

if [[ "$INCLUDE_FILES" == true ]]; then
  verify_flags+=("--components" "files")
fi

if [[ -n "$output_directory" ]]; then
  verify_flags+=("--output-directory" "$output_directory")
  evidence_flags+=("--output-directory" "$output_directory")
fi

if [[ -n "$product_key" ]]; then
  product_flags+=("--product-key" "$product_key")
fi
if [[ -n "$product_version" ]]; then
  product_flags+=("--product-version" "$product_version")
fi

if [[ -n "$SELCT_POLICY" ]]; then
  SCRIPT_PATH=$(dirname "$0")
  case $SELCT_POLICY in
    "scout")
      policy_flags+=("--policy" "$SCRIPT_PATH/scout_trivy.yaml")
      ;;
    *)
      policy_flags+=("--policy" "$SELCT_POLICY")
      ;;
  esac
fi

if [[ -n "$SELCT_POLICY" && -n "$EVIDENCE_DIR" ]]; then

  case $SELCT_POLICY in
    "scout")
      echo "* Running 3rd-Party Tool - Trivy Scan $target"
      mkdir -p $EVIDENCE_DIR

      # check tool exists
      if ! [ -x "$(command -v $trivy_tool)" ]; then
        echo "$trivy_tool not found locally, to install see 'https://aquasecurity.github.io/trivy/v0.57/getting-started/installation/'"
        echo "Install Trivy from command line 'curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin'"
        exit 1
      fi
      echo "Executing command: '$trivy_tool image --exit-code 0 --no-progress $target --output $EVIDENCE_DIR/trivy.results.sarif --format sarif'"
      if [[ -z "$DRY_RUN" ]]; then
        $trivy_tool image --exit-code 0 --no-progress "$target" --output "$EVIDENCE_DIR/trivy.results.sarif" --format sarif
      fi
      ;;
    *)
      echo "No extra command to run"
      ;;
  esac
fi


echo "* Adding 3rd-party evidence"
# Hack for Evidence Creation for Dir, needs to be supported in valint verify level.
if [[ -n "$EVIDENCE_DIR" ]]; then
  for file in $(find "$EVIDENCE_DIR" -type f); do
    evidence_final_flags=("${evidence_flags[@]}" "${product_flags[@]}")
    echo "Executing command: '$tool evidence ${file} ${evidence_final_flags[*]}'"
    if [[ -z "$DRY_RUN" ]]; then
        $tool evidence "${file}" "${evidence_final_flags[@]}"
    fi
  done
fi

# Combine final_flags with the remaining arguments
final_flags=("${valint_args[@]}" "${verify_flags[@]}" "${policy_flags[@]}" "${product_flags[@]}")

# Log and Execute the Command
echo "Executing command: '$tool verify $target ${final_flags[*]}'"
# Uncomment the following line to run the actual command
if [[ -z "$DRY_RUN" ]]; then
  $tool verify "$target" "${final_flags[@]}"
fi